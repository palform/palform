//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.14

use palform_tsid::{
    resources::{IDOrganisation, IDOrganisationAuthConfig},
    tsid::PalformDatabaseID,
};
use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "organisation")]
pub struct Model {
    pub display_name: String,
    pub created_at: DateTime,
    pub billing_customer_id: Option<String>,
    pub billing_allow_overage: bool,
    #[sea_orm(unique)]
    pub subdomain: Option<String>,
    pub billing_submission_block: Option<DateTime>,
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: PalformDatabaseID<IDOrganisation>,
    pub auth_config: Option<PalformDatabaseID<IDOrganisationAuthConfig>>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::admin_public_key::Entity")]
    AdminPublicKey,
    #[sea_orm(has_many = "super::admin_user::Entity")]
    AdminUser,
    #[sea_orm(has_many = "super::audit_log_entry::Entity")]
    AuditLogEntry,
    #[sea_orm(
        belongs_to = "super::organisation_auth_config::Entity",
        from = "Column::AuthConfig",
        to = "super::organisation_auth_config::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    OrganisationAuthConfig,
    #[sea_orm(has_many = "super::organisation_invite::Entity")]
    OrganisationInvite,
    #[sea_orm(has_many = "super::organisation_membership::Entity")]
    OrganisationMembership,
    #[sea_orm(has_many = "super::team::Entity")]
    Team,
}

impl Related<super::admin_public_key::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::AdminPublicKey.def()
    }
}

impl Related<super::audit_log_entry::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::AuditLogEntry.def()
    }
}

impl Related<super::organisation_auth_config::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::OrganisationAuthConfig.def()
    }
}

impl Related<super::organisation_invite::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::OrganisationInvite.def()
    }
}

impl Related<super::organisation_membership::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::OrganisationMembership.def()
    }
}

impl Related<super::team::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Team.def()
    }
}

impl Related<super::admin_user::Entity> for Entity {
    fn to() -> RelationDef {
        super::organisation_membership::Relation::AdminUser.def()
    }
    fn via() -> Option<RelationDef> {
        Some(
            super::organisation_membership::Relation::Organisation
                .def()
                .rev(),
        )
    }
}

impl ActiveModelBehavior for ActiveModel {}
