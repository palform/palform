//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.14

use palform_tsid::{
    resources::{IDAdminUser, IDOrganisation},
    tsid::PalformDatabaseID,
};
use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "admin_user")]
pub struct Model {
    pub display_name: String,
    #[sea_orm(unique)]
    pub email: String,
    pub created_at: DateTime,
    pub manual_auth_password_hash: Option<String>,
    pub manual_auth_email_verified: Option<bool>,
    pub org_auth_sub: Option<String>,
    pub org_auth_organisation_id: Option<PalformDatabaseID<IDOrganisation>>,
    pub service_account_auth_token: Option<String>,
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: PalformDatabaseID<IDAdminUser>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::admin_public_key::Entity")]
    AdminPublicKey,
    #[sea_orm(has_many = "super::admin_user_second_authentication_factor::Entity")]
    AdminUserSecondAuthenticationFactor,
    #[sea_orm(has_many = "super::admin_user_second_authentication_factor_session::Entity")]
    AdminUserSecondAuthenticationFactorSession,
    #[sea_orm(has_many = "super::audit_log_entry::Entity")]
    AuditLogEntry,
    #[sea_orm(has_many = "super::auth_token::Entity")]
    AuthToken,
    #[sea_orm(
        belongs_to = "super::organisation::Entity",
        from = "Column::OrgAuthOrganisationId",
        to = "super::organisation::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    Organisation,
    #[sea_orm(has_many = "super::organisation_membership::Entity")]
    OrganisationMembership,
    #[sea_orm(has_many = "super::team_membership::Entity")]
    TeamMembership,
}

impl Related<super::admin_public_key::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::AdminPublicKey.def()
    }
}

impl Related<super::admin_user_second_authentication_factor::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::AdminUserSecondAuthenticationFactor.def()
    }
}

impl Related<super::admin_user_second_authentication_factor_session::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::AdminUserSecondAuthenticationFactorSession.def()
    }
}

impl Related<super::audit_log_entry::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::AuditLogEntry.def()
    }
}

impl Related<super::auth_token::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::AuthToken.def()
    }
}

impl Related<super::organisation_membership::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::OrganisationMembership.def()
    }
}

impl Related<super::team_membership::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::TeamMembership.def()
    }
}

impl Related<super::organisation::Entity> for Entity {
    fn to() -> RelationDef {
        super::organisation_membership::Relation::Organisation.def()
    }
    fn via() -> Option<RelationDef> {
        Some(
            super::organisation_membership::Relation::AdminUser
                .def()
                .rev(),
        )
    }
}

impl Related<super::team::Entity> for Entity {
    fn to() -> RelationDef {
        super::team_membership::Relation::Team.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::team_membership::Relation::AdminUser.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
