//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.14

use palform_tsid::{
    resources::{IDFillAccessToken, IDForm},
    tsid::PalformDatabaseID,
};
use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "form_template")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub form_id: PalformDatabaseID<IDForm>,
    pub description: Option<String>,
    pub views: i64,
    pub clones: i64,
    pub author_name: String,
    pub preview_token: PalformDatabaseID<IDFillAccessToken>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::fill_access_token::Entity",
        from = "Column::PreviewToken",
        to = "super::fill_access_token::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    FillAccessToken,
    #[sea_orm(
        belongs_to = "super::form::Entity",
        from = "Column::FormId",
        to = "super::form::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Form,
    #[sea_orm(has_many = "super::form_template_category_assignment::Entity")]
    FormTemplateCategoryAssignment,
}

impl Related<super::fill_access_token::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::FillAccessToken.def()
    }
}

impl Related<super::form::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Form.def()
    }
}

impl Related<super::form_template_category_assignment::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::FormTemplateCategoryAssignment.def()
    }
}

impl Related<super::form_template_category::Entity> for Entity {
    fn to() -> RelationDef {
        super::form_template_category_assignment::Relation::FormTemplateCategory.def()
    }
    fn via() -> Option<RelationDef> {
        Some(
            super::form_template_category_assignment::Relation::FormTemplate
                .def()
                .rev(),
        )
    }
}

impl ActiveModelBehavior for ActiveModel {}
