//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

use palform_tsid::{resources::{IDSubmission, IDWebhook, IDWebhookJob}, tsid::PalformDatabaseID};
use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "webhook_job")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: PalformDatabaseID<IDWebhookJob>,
    pub webhook_id: PalformDatabaseID<IDWebhook>,
    pub submission_id: PalformDatabaseID<IDSubmission>,
    pub created_at: DateTime,
    pub done_at: Option<DateTime>,
    pub error: Option<String>,
    pub retries: i32,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::submission::Entity",
        from = "Column::SubmissionId",
        to = "super::submission::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    Submission,
    #[sea_orm(
        belongs_to = "super::webhook::Entity",
        from = "Column::WebhookId",
        to = "super::webhook::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    Webhook,
}

impl Related<super::submission::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Submission.def()
    }
}

impl Related<super::webhook::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Webhook.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
