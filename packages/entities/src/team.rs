//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.14

use palform_tsid::{
    resources::{IDOrganisation, IDTeam},
    tsid::PalformDatabaseID,
};
use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "team")]
pub struct Model {
    pub name: String,
    pub is_default: Option<bool>,
    pub organisation_id: PalformDatabaseID<IDOrganisation>,
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: PalformDatabaseID<IDTeam>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::form::Entity")]
    Form,
    #[sea_orm(has_many = "super::form_branding_team_access::Entity")]
    FormBrandingTeamAccess,
    #[sea_orm(
        belongs_to = "super::organisation::Entity",
        from = "Column::OrganisationId",
        to = "super::organisation::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    Organisation,
    #[sea_orm(has_many = "super::organisation_auth_team_mapping::Entity")]
    OrganisationAuthTeamMapping,
    #[sea_orm(has_many = "super::team_asset::Entity")]
    TeamAsset,
    #[sea_orm(has_many = "super::team_membership::Entity")]
    TeamMembership,
}

impl Related<super::form::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Form.def()
    }
}

impl Related<super::form_branding_team_access::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::FormBrandingTeamAccess.def()
    }
}

impl Related<super::organisation::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Organisation.def()
    }
}

impl Related<super::organisation_auth_team_mapping::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::OrganisationAuthTeamMapping.def()
    }
}

impl Related<super::team_asset::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::TeamAsset.def()
    }
}

impl Related<super::team_membership::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::TeamMembership.def()
    }
}

impl Related<super::admin_user::Entity> for Entity {
    fn to() -> RelationDef {
        super::team_membership::Relation::AdminUser.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::team_membership::Relation::Team.def().rev())
    }
}

impl Related<super::form_branding::Entity> for Entity {
    fn to() -> RelationDef {
        super::form_branding_team_access::Relation::FormBranding.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::form_branding_team_access::Relation::Team.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
